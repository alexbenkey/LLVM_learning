version: 2.1

# Define reusable commands
commands:
  install-llvm:
    description: "Install LLVM tools and dependencies"
    parameters:
      llvm-version:
        type: string
        default: "20"
    steps:
      - run:
          name: Install LLVM << parameters.llvm-version >> and dependencies
          command: |
            # Install prerequisites for adding APT repositories
            sudo apt-get update
            sudo apt-get install -y wget software-properties-common gnupg
            
            # Add LLVM APT repository
            wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
            
            # Determine Ubuntu codename
            CODENAME=$(lsb_release -sc)
            echo "Detected Ubuntu codename: $CODENAME"
            
            # Add the appropriate LLVM repository
            echo "deb http://apt.llvm.org/$CODENAME/ llvm-toolchain-$CODENAME-<< parameters.llvm-version >> main" | sudo tee /etc/apt/sources.list.d/llvm.list
            
            # Update package lists with new repository
            sudo apt-get update
            
            # Install LLVM tools
            sudo apt-get install -y \
              llvm-<< parameters.llvm-version >> \
              clang-<< parameters.llvm-version >> \
              llvm-<< parameters.llvm-version >>-dev \
              llvm-<< parameters.llvm-version >>-tools \
              python3-pip
            
            # Create symlinks for version-less commands
            sudo update-alternatives --install /usr/bin/llvm-as llvm-as /usr/bin/llvm-as-<< parameters.llvm-version >> 100
            sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-<< parameters.llvm-version >> 100
            sudo update-alternatives --install /usr/bin/FileCheck FileCheck /usr/bin/FileCheck-<< parameters.llvm-version >> 100
            sudo update-alternatives --install /usr/bin/opt opt /usr/bin/opt-<< parameters.llvm-version >> 100
            sudo update-alternatives --install /usr/bin/lli lli /usr/bin/lli-<< parameters.llvm-version >> 100
            
            # Install lit via pip
            pip3 install lit
            
            # Verify installations
            echo "=== Verifying LLVM Installation ==="
            echo "PATH: $PATH"
            echo "Available LLVM tools:"
            ls -la /usr/bin/*llvm* /usr/bin/*clang* /usr/bin/FileCheck* || true
            ls -la /usr/lib/llvm-<< parameters.llvm-version >>/bin/ || true
            
            echo "Tool versions:"
            llvm-as --version
            clang --version
            FileCheck --version
            opt --version
            lli --version
            lit --version
            
            echo "Testing basic functionality:"
            which llvm-as clang FileCheck opt lli
            echo 'define i32 @main() { ret i32 0 }' > test.ll
            llvm-as test.ll -o test.bc
            lli test.bc
            echo "Basic LLVM functionality verified"

  run-tests:
    description: "Run lit tests with proper reporting"
    parameters:
      output-dir:
        type: string
        default: "test-results"
    steps:
      - run:
          name: Create output directory
          command: mkdir -p << parameters.output-dir >>
      - run:
          name: Debug CircleCI environment and lit configuration
          command: |
            echo "=== Environment Debug ==="
            echo "Python version: $(python3 --version)"
            echo "Lit version: $(lit --version)"
            echo "Current directory: $(pwd)"
            echo "PATH: $PATH"
            
            echo "=== Tool Discovery Debug ==="
            echo "Available tools:"
            which llvm-as-20 llvm-as lli-20 lli opt-20 opt FileCheck-20 FileCheck clang-20 clang clang++-20 clang++ 2>/dev/null || true
            
            echo "=== Lit Configuration Debug ==="
            echo "Contents of lit.cfg.py:"
            cat lit.cfg.py
            
            echo "=== Testing Lit Substitution Processing ==="
            # Create a minimal test to isolate the regex issue
            mkdir -p debug-test
            echo '; RUN: echo "test"' > debug-test/minimal.test
            echo '; CHECK: test' >> debug-test/minimal.test
            
            echo "Minimal test contents:"
            cat debug-test/minimal.test
            
            echo "Running minimal test with maximum verbosity:"
            lit -vv debug-test/minimal.test 2>&1 || echo "Minimal test failed"
            
            echo "=== Python Regex Test ==="
            python3 -c '
import re
print("Testing regex patterns:")
patterns = ["%clang", "%clang++", "%llvm-as", "%FileCheck"]
for p in patterns:
    try:
        escaped = re.escape(p)
        compiled = re.compile(escaped)
        print(f"{p} -> {escaped} -> OK")
    except Exception as e:
        print(f"{p} -> ERROR: {e}")

print("\nEnvironment differences:")
import os
print(f"Python path: {os.sys.path}")
print(f"Working dir: {os.getcwd()}")
            '
          when: always
          
      - run:
          name: Test with minimal lit config to isolate issue
          command: |
            echo "=== Testing with Minimal Configuration ==="
            
            # Create a completely minimal lit.cfg.py
            cp lit.cfg.py lit.cfg.py.backup
            cat > lit.cfg.py << 'EOF'
# Minimal lit configuration for debugging
import os
import lit.formats

config.name = 'Debug-Test'
config.test_format = lit.formats.ShTest()
config.suffixes = ['.test']
config.test_source_root = os.path.dirname(__file__)
config.test_exec_root = os.path.join(config.test_source_root, 'Output')

# No substitutions - test raw commands
os.makedirs(config.test_exec_root, exist_ok=True)
EOF
            
            echo "Minimal config contents:"
            cat lit.cfg.py
            
            echo "Testing minimal config:"
            lit -vv debug-test/minimal.test 2>&1 || echo "Still failing with minimal config"
            
            # Try with absolute paths instead of substitutions
            cat > debug-test/absolute.test << 'EOF'
; RUN: /bin/echo "absolute path test"
; CHECK: absolute path test
EOF
            
            echo "Testing with absolute paths:"
            lit -vv debug-test/absolute.test 2>&1 || echo "Absolute path test failed"
            
            # Restore original config
            mv lit.cfg.py.backup lit.cfg.py
          when: always

      - run:
          name: Run LLVM lit tests
          command: |
            # Run tests with XML output for CircleCI
            lit -v --xunit-xml-output=<< parameters.output-dir >>/results.xml tests/
          
          # Continue even if some tests fail - we want to see the results
          when: always
      
      - store_test_results:
          path: << parameters.output-dir >>
      
      - store_artifacts:
          path: << parameters.output-dir >>
          destination: test-results

# Define the jobs
jobs:
  # Basic test job
  test-basic:
    docker:
      - image: cimg/base:stable
    
    steps:
      - checkout
      - install-llvm
      - run-tests
  
  # Test with different LLVM versions
  test-llvm-versions:
    docker:
      - image: cimg/base:stable
    
    parameters:
      llvm-version:
        type: string
    
    steps:
      - checkout
      - install-llvm:
          llvm-version: << parameters.llvm-version >>
      - run-tests:
          output-dir: "test-results-llvm-<< parameters.llvm-version >>"

  # Comprehensive test with code coverage and performance metrics
  test-comprehensive:
    docker:
      - image: cimg/base:stable
    
    resource_class: medium+  # Use more resources for comprehensive testing
    
    steps:
      - checkout
      - install-llvm
      
      # Run tests with timing information
      - run:
          name: Run tests with performance metrics
          command: |
            mkdir -p test-results
            mkdir -p performance-results
            
            # Run with timing information
            lit --time-tests --xunit-xml-output=test-results/results.xml tests/ | tee performance-results/timing.log
            
            # Extract slowest tests for analysis
            grep -A 20 "Slowest Tests:" performance-results/timing.log > performance-results/slow-tests.txt || true
      
      - store_test_results:
          path: test-results
      
      - store_artifacts:
          path: test-results
          destination: test-results
      
      - store_artifacts:
          path: performance-results
          destination: performance-metrics
      
      # Run exercises separately to track learning progress
      - run:
          name: Check exercise completion status
          command: |
            mkdir -p exercise-results
            echo "=== Exercise Completion Status ===" > exercise-results/status.txt
            
            # Count completed vs incomplete exercises
            if [ -d "exercises/" ]; then
              total_exercises=$(find exercises/ -name "*.ll" -not -name "*SOLUTION*" | wc -l)
              
              # Run exercises and capture results
              lit exercises/ > exercise-results/raw-output.txt 2>&1 || true
              
              passed=$(grep "Passed:" exercise-results/raw-output.txt | grep -o '[0-9]*' | head -1 || echo "0")
              failed=$(grep "Failed:" exercise-results/raw-output.txt | grep -o '[0-9]*' | head -1 || echo "0")
              
              echo "Total Exercises: $total_exercises" >> exercise-results/status.txt
              echo "Completed (Passing): $passed" >> exercise-results/status.txt
              echo "Incomplete (Failing): $failed" >> exercise-results/status.txt
              echo "" >> exercise-results/status.txt
              echo "Progress: $passed/$total_exercises exercises completed" >> exercise-results/status.txt
              
              # Show which exercises are incomplete
              echo "" >> exercise-results/status.txt
              echo "=== Incomplete Exercises ===" >> exercise-results/status.txt
              grep "FAIL:" exercise-results/raw-output.txt >> exercise-results/status.txt || echo "All exercises completed!" >> exercise-results/status.txt
              
              cat exercise-results/status.txt
            else
              echo "No exercises directory found" >> exercise-results/status.txt
            fi
      
      - store_artifacts:
          path: exercise-results
          destination: exercise-status

# Define workflows
workflows:
  version: 2
  
  # Main workflow - runs on every commit
  test-and-build:
    jobs:
      - test-basic
      
      # Run comprehensive tests only on main branch
      - test-comprehensive:
          filters:
            branches:
              only:
                - main
                - master
      
      # Test with different LLVM versions in parallel
      - test-llvm-versions:
          name: test-llvm-<< matrix.llvm-version >>
          matrix:
            parameters:
              llvm-version: ["16", "18", "20"]
          # Only run version matrix on main branch to save resources
          filters:
            branches:
              only:
                - main
                - master
  
  # Nightly workflow - runs daily for long-term monitoring
  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"  # Run at 2 AM UTC daily
          filters:
            branches:
              only:
                - main
                - master
    
    jobs:
      - test-comprehensive
      - test-llvm-versions:
          name: nightly-llvm-<< matrix.llvm-version >>
          matrix:
            parameters:
              llvm-version: ["16", "17", "18", "19", "20"]